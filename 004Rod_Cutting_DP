/*



Given a rod of length 'n' along with prices of its pieces of different lengths, design an algorithm to 
compute the maximum profit we can make by cutting the rod and a selling its pieces. 

Example :
	
	Input : n = 8
	        length : [1,  2,  3,  4,  5,  6,  7,  8]
	        prices : [1,  5,  8,  9,  10, 17, 17, 20]
	Output : 22

	Input : n = 8
	        length : [1,  2,  3,  4,  5,  6,  7,  8]
	        prices : [3,  5,  8,  9, 10, 17, 17, 20]
	Output : 24

	
*/


#include<iostream>
#include<vector>
#include<climits>

using namespace std;

int maxProfit(int n, vector<int> profits) {

	// base case
	if(n == 0) {
		// compute the maximum profit you'll make given a rod of length 0
		return 0;
	}

	// recursive case
	int ans = INT_MIN;
	for(int j=1; j<=n; j++) {
		ans = max(ans, profits[j-1] + maxProfit(n-j, profits));
	}

	return ans;

}

int maxProfitBottomUp(int n, vector<int> profits) {

	vector<int> dp(n+1); // Created a vector of size of n+1

	dp[0] = 0; // base case

	for(int i=1; i<=n; i++) {
		int ans = INT_MIN;
		for(int j=1; j<=i; j++) {
			ans = max(ans, profits[j-1] + dp[i-j]);
		}
		dp[i] = ans;
	}

	return dp[n]; // our final answer is at n which is at last

}

int main() {

	vector<int> profits = {1,  5,  8,  9,  10, 17, 17, 20};
	int n = profits.size();

	cout << maxProfit(n, profits) << endl;

	cout << maxProfitBottomUp(n, profits) << endl;
		
	return 0;
}
